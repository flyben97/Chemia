# Feature-Level Concatenation Mode Configuration
# This mode extracts molecular-level features from each SMILES and concatenates them

metadata:
  name: "Feature Concatenation Mode Demo"
  description: "Use feature-level concatenation instead of graph batching"
  use_case: "When you want traditional ML behavior with GNN-derived features"

# Data Configuration
data:
  file_path: "data/multi_component_reaction.csv"
  target_column: "reaction_yield"
  smiles_columns: ["catalyst", "reactant_1", "reactant_2", "solvent"]
  task_type: "regression"

# Data Splitting
split:
  method: "random"
  test_size: 0.2
  validation_size: 0.2
  random_state: 42

# Training Configuration - Feature Concatenation Mode
training:
  models_to_run: ["gcn", "gat"]  # Simple GNN models for feature extraction
  n_trials: 15
  max_epochs: 100
  early_stopping_patience: 20
  batch_size: 32
  cv_folds: 3

# Graph Construction - Feature Concatenation Mode
graph_construction:
  mode: "feature_concat"
  molecular_feature_size: 50  # Each molecule → 50-dim feature vector
  
  # This mode will:
  # 1. Convert each SMILES to molecular descriptors (not full graph)
  # 2. Concatenate all molecular features: [catalyst_features + reactant1_features + reactant2_features + solvent_features]
  # 3. Result: single feature vector of size 4 × 50 = 200 dimensions
  # 4. Train on this concatenated representation

# Model Configuration for Feature Concatenation
model_configs:
  gcn:
    # Note: In feature_concat mode, the model processes concatenated features
    # instead of graph structure, so some graph-specific params are ignored
    hidden_dim: [128, 256]
    num_layers: [2, 3]  # Fewer layers since we're not doing graph convolution
    dropout_rate: [0.2, 0.3]
  
  gat:
    hidden_dim: [128, 256]
    num_layers: [2, 3]
    num_heads: [4, 8]
    attention_dropout: [0.1, 0.2]

# Evaluation
evaluation:
  metrics:
    regression: ["r2", "rmse", "mae"]
  compare_with_traditional: true  # Compare with traditional ML on same features

# Output
output:
  base_directory: "results/feature_concat_mode"
  save_models: true
  save_predictions: true
  
# Advantages of Feature Concatenation Mode:
# ✓ Faster training (no graph convolutions)
# ✓ More interpretable (traditional feature vector)
# ✓ Works well when molecular structure interactions are less important
# ✓ Compatible with traditional ML methods
# 
# Disadvantages:
# ✗ Loses graph structure information
# ✗ Fixed feature representation
# ✗ No inter-molecular interactions modeled 